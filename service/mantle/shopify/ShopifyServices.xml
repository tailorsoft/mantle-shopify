<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <!--
        Consume method for the ShopifySystemMessage.
        Splits out the 
    -->
    <service verb="consume" noun="ShopifySystemMessage">
        <implements service="org.moqui.impl.SystemMessageServices.consume#SystemMessage"/>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage"/>
            <if condition="systemMessage.docType == 'products'"><then>
                <service-call name="mantle.shopify.ShopifyProductServices.consume#ProductListSystemMessage" in-map="context" out-map="context"/>

            </then><else-if condition="systemMessage.docType == 'product'">
                <service-call name="mantle.shopify.ShopifyProductServices.consume#ProductSystemMessage" in-map="context" out-map="context"/>

            </else-if><else-if condition="systemMessage.docType == 'orders'">
                <service-call name="mantle.shopify.ShopifyOrderServices.consume#OrderListSystemMessage" in-map="context" out-map="context"/>

            </else-if><else-if condition="systemMessage.docType == 'order'">
                <service-call name="mantle.shopify.ShopifyOrderServices.consume#OrderSystemMessage" in-map="context" out-map="context"/>

            </else-if><else>
                <return error="true" message="No match docType found for systemMessage ID ${systemMessageId}"/>
            </else></if>
        </actions>
    </service>

    <!-- 
        This is a generic send message for all outgoing POST/PUT requests.
        Currently only used for pushing shipments and refunds.
     -->
    <service verb="send" noun="ShopifySystemMessage" authenticate="anonymous-all">
        <implements service="org.moqui.impl.SystemMessageServices.send#SystemMessage"/>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage"/>
            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="remote">
                <field-map field-name="systemMessageTypeId" value="ShopifySystemMessageType"/>
                <field-map field-name="systemMessageRemoteId" from="systemMessage.systemMessageRemoteId"/>
            </entity-find-one>
            <if condition="!remote"><return error="true" message="No Remote of type 'ShopifySystemMessageType' found for ID ${systemMessageId}"/></if>
            <script><![CDATA[
                String url = "https://${remote.username}.myshopify.com/admin/api/2023-01/{systemMessage.docType}.json";
                org.moqui.util.RestClient.RestResponse restResponse = ec.service.rest().method(systemMessage.docSubType)
                    .jsonObject(systemMessage.messageText).addHeader("Content-Type", "application/json")
                    .addHeader("X-Shopify-Access-Token", remote.password).uri(url).call();

                if (restResponse.statusCode != 200) {
                    ec.message.addError("System message ${systemMessageId} send error response (${restResponse.statusCode}): ${restResponse.text()} for url: ${url}")
                }
            ]]></script>
        </actions>
    </service>

    <service verb="configure" noun="FacilityFromShopifyLocation">
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="response"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="remote"/>

            <entity-find entity-name="mantle.product.store.ProductStoreFacility" list="storeFacilityList">
                <econdition field-name="productStoreId" from="remote.productStoreId"/>
                <date-filter/>
            </entity-find>
            <if condition="!storeFacilityList"><return error="true" message="No Facilities configured for Store ID ${remote.productStoreId}"/></if>
            <if condition="storeFacilityList.size() &gt; 1"><return error="true" message="Too many facilities configured in Moqui for Store ID ${remote.productStoreId}, Please manually configure the externalId on mantle.facility.Facility"/></if>
            <set field="facilityId" from="storeFacilityList.first().facilityId"/>


            <set field="responseMap" from="[:]"/>
            <script><![CDATA[
                String url = "https://${remote.username}.myshopify.com/admin/api/2023-01/locations.json";
                org.moqui.util.RestClient.RestResponse restResponse = ec.service.rest().method("GET")
                    .addHeader("X-Shopify-Access-Token", remote.password).uri(url).call();

                if (restResponse.statusCode != 200) {
                    ec.message.addError("Shopify Orders API Response ${restResponse.statusCode} ${restResponse.reasonPhrase}: ${restResponse.text()}")
                    return;
                }
                responseMap = new groovy.json.JsonSlurper().parseText(restResponse.text());
            ]]></script>
            <if condition="!responseMap.locations"><return error="true" message="No Locations configured in Shopify, please add a location"/></if>

            <!-- TODO, find out why extra location appears on shopify if condition="responseMap.locations.size() &gt; 1"><return error="true" message="Too many locations configured in Shopify, Please manually configure the externalId on mantle.facility.Facility"/></if-->

            <entity-find-one entity-name="mantle.facility.Facility" value-field="facility" for-update="true"/>
            <set field="location" from="responseMap.locations.find({it.name == facility.facilityName})"/>

            <if condition="!location"><return error="true" message="No Location named ${facility.facilityName} found in Shopify, aborting"/></if>

            <set field="facility.externalId" from="location.id"/>
            <entity-update value-field="facility"/>

            <set field="response" value="Facility ${facilityId} with location_id ${location.id} from shopify"/>
        </actions>
    </service>

    <!-- 
        I think its preferable to use the manually created Locations in Shopify and run the service configure#FacilityFromShopifyLocation
        This is because a default location is a requirement in Shopify, to have a default address, so the location created here becomes secondary
        The 'fulfillment service' created by this service cannot be inspected in the shopify admin, and cannot be set as default.
    -->
    <service verb="create" noun="ShopifyFulfilmentService">
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="facilityId">If not passed, the Facility from the store configured on the SystemMessageRemote will be used</parameter>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="remote"/>

            <if condition="!facilityId">
                <entity-find entity-name="mantle.product.store.ProductStoreFacility" list="storeFacilityList">
                    <econdition field-name="productStoreId" from="remote.productStoreId"/>
                    <date-filter/>
                </entity-find>
                <if condition="!storeFacilityList"><return error="true" message="No Facilities configured for Store ID ${remote.productStoreId}"/></if>

                <if condition="storeFacilityList.size() &gt; 1"><return error="true" message="Too many facilities configured in Moqui, please specify the facilityId as a parameter"/></if>
                <set field="facilityId" from="storeFacilityList.first().facilityId"/>
            </if>

            <entity-find-one entity-name="mantle.facility.Facility" value-field="facility" for-update="true" />

            <set field="fulfillment_service" from="[
                'format': 'json',
                'name' : facility.facilityName,
                'callback_url': 'https://moqui.org',
                'inventory_management': true,
                'tracking_support': true,
                'requires_shipping_method': true,
                'permits_sku_sharing': true,
                'fulfillment_orders_opt_in': true
            ]"/>

            <set field="responseMap" from="[:]"/>
            <script><![CDATA[
                String url = "https://${remote.username}.myshopify.com/admin/api/2023-01/fulfillment_services.json";
                org.moqui.util.RestClient.RestResponse restResponse = ec.service.rest().method("POST")
                    .addHeader("Content-Type", "application/json").addHeader("X-Shopify-Access-Token", remote.password)
                    .jsonObject(groovy.json.JsonOutput.toJson([fulfillment_service: fulfillment_service]))
                    .uri(url).call();

                if (restResponse.statusCode == 422) {
                    responseMap = new groovy.json.JsonSlurper().parseText(restResponse.text());
                    ec.message.addError("Cannot POST to fulfillment_services.json, '${responseMap.errors.base[0]}'")
                    return;
                }

                if (restResponse.statusCode != 201) {
                    ec.message.addError("Shopify Fulillment Services API Response ${restResponse.statusCode} ${restResponse.reasonPhrase}: ${restResponse.text()}")
                    return;
                }
                responseMap = new groovy.json.JsonSlurper().parseText(restResponse.text());
            ]]></script>

            <set field="facility.externalId" from="responseMap.fulfillment_service.location_id"/>
            <entity-update value-field="facility"/>
        </actions>
    </service>
</services>